/* The following code was generated by JFlex 1.3.5 on 7/4/03 3:28 AM */

package freenet.client.http.filter;
import java.io.IOException;
import java.io.Reader;
import java.io.Writer;

import freenet.Core;
import freenet.support.Logger;
/* This class tokenizes a CSS2 Reader stream, writes it out to the output Writer, and filters any URLs found */
// WARNING: this is not as thorough as the HTML parser - new versions of the standard could lead to anonymity risks. See comments in SaferFilter.java
// Mostly from http://www.w3.org/TR/REC-CSS2/grammar.html


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 7/4/03 3:28 AM from the specification file
 * <tt>file:/usr/src/cvs/freenet-unstable/src/freenet/client/http/filter/CSSTokenizerFilter.jflex</tt>
 */
class CSSTokenizerFilter {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\3\1\0\1\3\1\3\22\0\1\5\1\43\1\11"+
    "\1\25\1\4\1\63\1\4\1\12\1\23\1\14\1\41\1\56\1\26"+
    "\1\10\1\13\1\40\12\1\1\64\1\35\1\42\1\46\1\44\1\24"+
    "\1\31\1\50\1\6\1\54\1\52\1\51\1\53\1\22\1\60\1\20"+
    "\1\7\1\62\1\30\1\32\1\21\1\34\1\33\1\7\1\17\1\15"+
    "\1\16\1\27\1\7\1\55\1\57\1\7\1\61\1\4\1\2\4\4"+
    "\1\50\1\6\1\54\1\52\1\51\1\53\1\22\1\60\1\20\1\7"+
    "\1\62\1\30\1\32\1\21\1\34\1\33\1\7\1\17\1\15\1\16"+
    "\1\27\1\7\1\55\1\57\1\7\1\61\1\36\1\47\1\37\1\45"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    53,   106,   159,   212,   265,   318,   371,   424,   477, 
       53,   530,    53,   583,   636,    53,   689,   742,   795,   848, 
      901,   954,  1007,   159,  1060,   477,    53,  1113,    53,    53, 
     1166,  1219,   371,  1272,    53,   424,  1325,  1378,  1431,  1484, 
     1537,  1590,  1643,  1696,  1749,  1802,  1855,  1908,  1961,  2014, 
     2067,  2120,  2173,    53,    53,  2226,  2279,  2332,    53,   371, 
      424,  2385,  2438,  2491,  2544,  2597,  2650,  2703,  2756,  2809, 
     2862,  2915,  2968,  3021,  3074,  3127,  3180,  3233,    53,  3286, 
     3339,  3392,  3445,  3498,  3551,  3604,  3657,  3710,  3763,  3816, 
     3869,  3922,  3975,  4028,  4081,  4134,  4187,  4240,  1696,  4293, 
     4346,  4399,  4452,  4505,  4558,    53,  4611,    53,  4664,  4717, 
     4770,  4823,  4876,  4929,  4982,  4081,  5035,  5088,    53,  5141, 
     5194,  5247,  5300,  5353,  5406,  5459,  1696,  5512,  5565,  2067, 
     5618,  5671,  5724,  5777,  5830,  4929,  5883,  5936,  5989,  6042, 
     6095,  6148,    53,  6201,  6254,  6307,  6360,  6413,  1696,  6466, 
     6519,  6572,  6625,  6678,  1537,  6731,  6784,  5035,  5989,  6837, 
     6890,  6943,  5088,  6095,  6996,  5141,  7049,  7102,  7155,  7208, 
     7261,  7314,  7367,  7420,  7473,  7526,  5989,  7579,  6095,  7632, 
     7685,    53,  7738,  7791,  7844,  7897,  7950,  8003,  8056,  8109, 
     8162,  8162,  8215,  8268,  8321,  8374,  8427,  8480,  8533,  8586, 
     7897,  7897,  8639,  8692,  8745,  8798,  8851,  8798,  8162,  8904, 
     8957,  9010,  9063,  9116,  9169,    53,  9222,  9275,  9328,  9381, 
     9434,    53,  9487,  9540,  9593,  9646,  9699,  1696,  9752,  9805, 
     9858,  9911,  9911,  9964, 10017, 10070, 10123, 10176,  8056, 10229, 
    10282, 10335, 10388, 10441,  8798, 10494, 10547, 10600,  9328, 10653, 
       53, 10706, 10759, 10812, 10865, 10918, 10971, 11024, 11077, 11130, 
    11183, 11236, 11289, 11342, 11289, 11395, 11448, 11501,  9063, 11554, 
    11607, 11660, 11713, 11766, 11819, 11872, 11925, 11978, 12031, 12084, 
    12137, 12190,  9911,    53, 12243, 12296, 12349, 12402, 12455, 12508, 
    12561, 12614, 12667, 12720, 12773, 12826, 12879, 12932, 12985, 13038, 
    13091, 13144, 13197, 13250, 13303
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\2\1\3\1\4\1\5\1\2\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\1\13\6\6\2\2\1\14\1\15"+
    "\1\16\1\6\1\17\3\6\1\20\1\21\1\22\1\23"+
    "\1\15\1\24\1\25\1\15\1\26\1\2\1\27\6\6"+
    "\1\15\4\6\1\2\1\15\66\0\1\3\1\30\1\31"+
    "\1\0\1\31\3\6\2\0\1\32\1\0\6\6\1\33"+
    "\2\0\1\34\2\6\1\0\3\6\1\35\12\0\6\6"+
    "\1\0\4\6\1\36\2\0\1\37\1\6\1\0\2\6"+
    "\1\37\41\6\5\37\10\6\3\0\1\5\1\0\1\5"+
    "\30\0\1\21\1\22\26\0\1\6\1\30\1\31\1\0"+
    "\1\31\3\6\4\0\6\6\1\33\2\0\1\34\2\6"+
    "\1\0\3\6\1\35\12\0\6\6\1\0\4\6\12\0"+
    "\1\40\54\0\2\41\1\42\6\41\1\43\53\41\2\44"+
    "\1\45\7\44\1\43\52\44\1\0\1\46\64\0\1\47"+
    "\1\50\3\0\1\47\2\51\4\0\6\51\4\0\2\51"+
    "\1\0\3\51\13\0\5\47\1\51\1\0\4\51\3\0"+
    "\1\6\1\30\1\31\1\0\1\31\3\6\4\0\2\6"+
    "\1\52\3\6\1\33\2\0\1\34\2\6\1\0\3\6"+
    "\1\35\12\0\6\6\1\53\4\6\3\0\1\54\1\55"+
    "\3\0\2\54\5\0\3\54\1\56\2\54\4\0\2\54"+
    "\1\0\1\57\1\60\1\54\13\0\3\54\1\61\1\62"+
    "\1\54\1\0\4\54\5\0\1\21\1\0\1\21\62\0"+
    "\1\22\1\0\1\22\120\0\1\63\66\0\1\64\57\0"+
    "\1\65\74\0\1\66\64\0\1\67\21\0\1\31\1\0"+
    "\1\31\20\0\1\34\6\0\1\35\30\0\1\70\1\71"+
    "\1\34\1\0\1\34\2\70\5\0\6\70\4\0\2\70"+
    "\1\0\3\70\13\0\6\70\1\0\4\70\3\0\1\72"+
    "\1\30\1\6\1\0\1\6\1\72\2\6\4\0\6\6"+
    "\1\33\2\0\1\34\2\6\1\0\3\6\1\35\12\0"+
    "\5\72\1\6\1\0\4\6\46\0\1\73\20\0\2\41"+
    "\1\42\6\41\1\74\53\41\2\44\1\45\7\44\1\75"+
    "\52\44\1\0\1\46\13\0\1\36\1\0\1\76\1\77"+
    "\1\0\1\100\7\0\1\101\1\102\15\0\1\103\1\104"+
    "\1\0\1\105\3\0\1\106\1\0\1\107\1\36\2\0"+
    "\1\110\1\50\3\0\1\110\2\51\4\0\6\51\4\0"+
    "\2\51\1\0\3\51\13\0\5\110\1\51\1\0\4\51"+
    "\3\0\1\111\1\51\1\0\2\51\1\111\41\51\5\111"+
    "\10\51\1\0\1\51\1\50\3\0\3\51\4\0\6\51"+
    "\4\0\2\51\1\0\3\51\13\0\6\51\1\0\4\51"+
    "\3\0\1\6\1\30\1\31\1\0\1\31\3\6\4\0"+
    "\6\6\1\33\2\0\1\34\1\6\1\112\1\0\3\6"+
    "\1\35\12\0\6\6\1\0\4\6\3\0\1\113\4\0"+
    "\1\113\15\0\1\114\23\0\5\113\10\0\1\115\1\54"+
    "\1\116\3\115\3\54\1\0\3\115\6\54\4\115\2\54"+
    "\1\115\3\54\1\117\1\115\1\117\10\115\6\54\1\115"+
    "\4\54\2\115\1\0\1\120\1\54\1\0\2\54\1\120"+
    "\41\54\5\120\10\54\1\115\1\54\1\116\3\115\3\54"+
    "\1\0\3\115\6\54\4\115\2\54\1\115\1\121\2\54"+
    "\1\117\1\115\1\117\10\115\6\54\1\115\4\54\3\115"+
    "\1\54\1\116\3\115\3\54\1\0\3\115\6\54\4\115"+
    "\2\54\1\115\3\54\1\117\1\115\1\117\10\115\1\54"+
    "\1\122\4\54\1\115\4\54\3\115\1\54\1\116\3\115"+
    "\3\54\1\0\3\115\6\54\4\115\2\54\1\115\3\54"+
    "\1\117\1\115\1\117\10\115\1\123\5\54\1\115\4\54"+
    "\3\115\1\54\1\116\3\115\3\54\1\0\3\115\6\54"+
    "\4\115\2\54\1\115\2\54\1\124\1\117\1\115\1\117"+
    "\10\115\6\54\1\115\4\54\3\115\1\54\1\116\3\115"+
    "\3\54\1\0\3\115\6\54\4\115\2\54\1\115\3\54"+
    "\1\117\1\115\1\117\10\115\6\54\1\115\1\54\1\125"+
    "\2\54\2\115\41\63\1\126\23\63\10\0\1\127\131\0"+
    "\1\130\10\0\1\70\1\71\1\31\1\0\1\31\3\70"+
    "\4\0\6\70\3\0\1\34\2\70\1\0\3\70\1\35"+
    "\12\0\6\70\1\0\4\70\3\0\1\131\1\70\1\0"+
    "\2\70\1\131\41\70\5\131\10\70\1\0\1\132\1\30"+
    "\1\6\1\0\1\6\1\132\2\6\4\0\6\6\1\33"+
    "\2\0\1\34\2\6\1\0\3\6\1\35\12\0\5\132"+
    "\1\6\1\0\4\6\52\0\1\133\35\0\1\36\62\0"+
    "\1\76\62\0\1\36\14\0\1\36\106\0\1\36\2\0"+
    "\1\36\37\0\1\36\24\0\1\36\56\0\1\134\45\0"+
    "\1\36\113\0\1\36\63\0\1\106\5\0\1\135\1\50"+
    "\3\0\1\135\2\51\4\0\6\51\4\0\2\51\1\0"+
    "\3\51\13\0\5\135\1\51\1\0\4\51\3\0\1\136"+
    "\1\50\1\51\1\0\1\51\1\136\2\51\4\0\6\51"+
    "\4\0\2\51\1\0\3\51\13\0\5\136\1\51\1\0"+
    "\4\51\3\0\1\6\1\30\1\31\1\0\1\31\3\6"+
    "\4\0\6\6\1\137\2\0\1\34\2\6\1\0\3\6"+
    "\1\35\12\0\6\6\1\0\4\6\3\0\1\140\4\0"+
    "\1\140\1\0\1\141\13\0\1\142\23\0\5\140\34\0"+
    "\1\142\40\0\11\115\1\0\23\115\1\117\1\115\1\117"+
    "\26\115\1\120\1\54\1\115\2\54\1\120\26\54\1\143"+
    "\1\54\1\143\10\54\5\120\10\54\1\115\1\144\1\116"+
    "\1\54\1\115\1\54\1\144\2\54\1\0\3\115\6\54"+
    "\4\115\2\54\1\115\3\54\1\117\1\115\1\117\10\115"+
    "\5\144\1\54\1\115\4\54\3\115\1\54\1\116\3\115"+
    "\3\54\1\0\3\115\6\54\4\115\2\54\1\115\1\54"+
    "\1\145\1\54\1\117\1\115\1\117\10\115\6\54\1\115"+
    "\4\54\3\115\1\54\1\116\3\115\3\54\1\0\3\115"+
    "\6\54\4\115\2\54\1\115\3\54\1\117\1\115\1\117"+
    "\10\115\2\54\1\146\3\54\1\115\4\54\3\115\1\54"+
    "\1\116\3\115\3\54\1\0\3\115\5\54\1\147\4\115"+
    "\2\54\1\115\3\54\1\117\1\115\1\117\10\115\6\54"+
    "\1\115\4\54\3\115\1\54\1\116\3\115\3\54\1\0"+
    "\3\115\4\54\1\150\1\54\4\115\2\54\1\115\3\54"+
    "\1\117\1\115\1\117\10\115\6\54\1\115\4\54\3\115"+
    "\1\54\1\116\3\115\3\54\1\0\3\115\6\54\4\115"+
    "\2\54\1\115\3\54\1\117\1\115\1\117\10\115\1\151"+
    "\5\54\1\115\4\54\2\115\40\63\1\152\1\153\23\63"+
    "\10\0\1\154\113\0\1\155\26\0\1\156\1\71\1\70"+
    "\1\0\1\70\1\156\2\70\4\0\6\70\3\0\1\34"+
    "\2\70\1\0\3\70\1\35\12\0\5\156\1\70\1\0"+
    "\4\70\3\0\1\157\1\30\1\6\1\0\1\6\1\157"+
    "\2\6\4\0\6\6\1\33\2\0\1\34\2\6\1\0"+
    "\3\6\1\35\12\0\5\157\1\6\1\0\4\6\54\0"+
    "\1\36\34\0\1\36\43\0\1\160\1\50\3\0\1\160"+
    "\2\51\4\0\6\51\4\0\2\51\1\0\3\51\13\0"+
    "\5\160\1\51\1\0\4\51\3\0\1\161\1\50\1\51"+
    "\1\0\1\51\1\161\2\51\4\0\6\51\4\0\2\51"+
    "\1\0\3\51\13\0\5\161\1\51\1\0\4\51\2\0"+
    "\2\162\1\163\1\164\1\162\1\164\3\162\1\165\1\166"+
    "\1\162\1\167\6\162\1\170\41\162\1\0\1\171\4\0"+
    "\1\171\1\0\1\141\13\0\1\172\23\0\5\171\11\0"+
    "\1\173\4\0\1\173\41\0\5\173\34\0\1\172\40\0"+
    "\1\115\1\174\1\116\1\54\1\115\1\54\1\174\2\54"+
    "\1\0\3\115\6\54\4\115\2\54\1\115\3\54\1\117"+
    "\1\115\1\117\10\115\5\174\1\54\1\115\4\54\3\115"+
    "\1\54\1\116\3\115\3\54\1\0\3\115\6\54\4\115"+
    "\2\54\1\115\2\54\1\175\1\117\1\115\1\117\10\115"+
    "\6\54\1\115\4\54\3\115\1\54\1\116\3\115\3\54"+
    "\1\0\3\115\3\54\1\176\2\54\4\115\2\54\1\115"+
    "\3\54\1\117\1\115\1\117\10\115\6\54\1\115\4\54"+
    "\3\115\1\54\1\116\3\115\3\54\1\0\3\115\6\54"+
    "\4\115\2\54\1\115\3\54\1\117\1\115\1\117\10\115"+
    "\1\54\1\177\4\54\1\115\4\54\3\115\1\54\1\116"+
    "\3\115\3\54\1\0\3\115\1\54\1\200\4\54\4\115"+
    "\2\54\1\115\3\54\1\117\1\115\1\117\10\115\6\54"+
    "\1\115\4\54\3\115\1\54\1\116\3\115\3\54\1\0"+
    "\3\115\2\54\1\201\3\54\4\115\2\54\1\115\3\54"+
    "\1\117\1\115\1\117\10\115\6\54\1\115\4\54\2\115"+
    "\40\63\1\202\1\153\23\63\20\0\1\203\45\0\1\204"+
    "\1\71\1\70\1\0\1\70\1\204\2\70\4\0\6\70"+
    "\3\0\1\34\2\70\1\0\3\70\1\35\12\0\5\204"+
    "\1\70\1\0\4\70\3\0\1\205\1\30\1\6\1\0"+
    "\1\6\1\205\2\6\4\0\6\6\1\33\2\0\1\34"+
    "\2\6\1\0\3\6\1\35\12\0\5\205\1\6\1\0"+
    "\4\6\3\0\1\206\1\50\3\0\1\206\2\51\4\0"+
    "\6\51\4\0\2\51\1\0\3\51\13\0\5\206\1\51"+
    "\1\0\4\51\3\0\1\207\1\50\1\51\1\0\1\51"+
    "\1\207\2\51\4\0\6\51\4\0\2\51\1\0\3\51"+
    "\13\0\5\207\1\51\1\0\4\51\2\0\2\162\1\163"+
    "\6\162\2\170\1\162\1\167\6\162\1\170\43\162\1\163"+
    "\11\162\1\210\50\162\2\165\1\211\6\165\1\212\2\165"+
    "\1\213\50\165\2\166\1\214\7\166\1\212\1\166\1\215"+
    "\50\166\2\170\1\216\11\170\1\217\50\170\1\0\1\220"+
    "\4\0\1\220\1\0\1\141\13\0\1\221\23\0\5\220"+
    "\34\0\1\221\41\0\1\222\4\0\1\222\41\0\5\222"+
    "\10\0\1\115\1\223\1\116\1\54\1\115\1\54\1\223"+
    "\2\54\1\0\3\115\6\54\4\115\2\54\1\115\3\54"+
    "\1\117\1\115\1\117\10\115\5\223\1\54\1\115\4\54"+
    "\3\115\1\54\1\116\3\115\3\54\1\0\3\115\2\54"+
    "\1\224\3\54\4\115\2\54\1\115\3\54\1\117\1\115"+
    "\1\117\10\115\6\54\1\115\4\54\3\115\1\54\1\116"+
    "\3\115\3\54\1\0\3\115\6\54\4\115\2\54\1\115"+
    "\3\54\1\117\1\115\1\117\10\115\1\225\5\54\1\115"+
    "\4\54\3\115\1\54\1\116\3\115\2\54\1\226\1\0"+
    "\3\115\6\54\4\115\2\54\1\115\3\54\1\117\1\115"+
    "\1\117\10\115\6\54\1\115\4\54\3\115\1\54\1\116"+
    "\3\115\3\54\1\0\3\115\1\227\5\54\4\115\2\54"+
    "\1\115\3\54\1\117\1\115\1\117\10\115\6\54\1\115"+
    "\4\54\2\115\32\0\1\230\33\0\1\231\1\71\1\70"+
    "\1\0\1\70\1\231\2\70\4\0\6\70\3\0\1\34"+
    "\2\70\1\0\3\70\1\35\12\0\5\231\1\70\1\0"+
    "\4\70\3\0\1\232\1\30\1\6\1\0\1\6\1\232"+
    "\2\6\4\0\6\6\1\33\2\0\1\34\2\6\1\0"+
    "\3\6\1\35\12\0\5\232\1\6\1\0\4\6\3\0"+
    "\1\233\1\50\3\0\1\233\2\51\4\0\6\51\4\0"+
    "\2\51\1\0\3\51\13\0\5\233\1\51\1\0\4\51"+
    "\3\0\1\234\1\50\1\51\1\0\1\51\1\234\2\51"+
    "\4\0\6\51\4\0\2\51\1\0\3\51\13\0\5\234"+
    "\1\51\1\0\4\51\2\0\2\165\1\211\6\165\1\235"+
    "\2\165\1\236\50\165\2\170\1\216\1\212\1\170\1\212"+
    "\6\170\1\167\50\170\2\237\1\240\6\237\1\241\53\237"+
    "\2\166\1\214\7\166\1\242\1\166\1\243\50\166\2\244"+
    "\1\245\7\244\1\241\52\244\2\170\1\216\11\170\1\246"+
    "\50\170\1\0\1\247\4\0\1\247\1\0\1\141\13\0"+
    "\1\250\23\0\5\247\34\0\1\250\41\0\1\251\4\0"+
    "\1\251\41\0\5\251\10\0\1\115\1\252\1\116\1\54"+
    "\1\115\1\54\1\252\2\54\1\0\3\115\6\54\4\115"+
    "\2\54\1\115\3\54\1\117\1\115\1\117\10\115\5\252"+
    "\1\54\1\115\4\54\3\115\1\54\1\116\3\115\3\54"+
    "\1\0\3\115\1\54\1\253\4\54\4\115\2\54\1\115"+
    "\3\54\1\117\1\115\1\117\10\115\6\54\1\115\4\54"+
    "\3\115\1\54\1\116\3\115\3\54\1\0\3\115\6\54"+
    "\4\115\2\54\1\115\3\54\1\117\1\115\1\117\10\115"+
    "\3\54\1\254\2\54\1\115\4\54\3\115\1\54\1\116"+
    "\3\115\3\54\1\0\3\115\6\54\4\115\2\54\1\115"+
    "\3\54\1\117\1\115\1\117\10\115\1\54\1\255\4\54"+
    "\1\115\4\54\2\115\33\0\1\256\32\0\1\257\1\71"+
    "\1\70\1\0\1\70\1\257\2\70\4\0\6\70\3\0"+
    "\1\34\2\70\1\0\3\70\1\35\12\0\5\257\1\70"+
    "\1\0\4\70\3\0\1\6\1\30\1\6\1\0\4\6"+
    "\4\0\6\6\1\33\2\0\1\34\2\6\1\0\3\6"+
    "\1\35\12\0\6\6\1\0\4\6\3\0\1\260\1\50"+
    "\1\51\1\0\1\51\1\260\2\51\4\0\6\51\4\0"+
    "\2\51\1\0\3\51\13\0\5\260\1\51\1\0\4\51"+
    "\2\0\2\165\1\211\1\235\1\165\1\235\3\165\1\212"+
    "\2\165\1\261\50\165\2\237\1\240\6\237\1\262\53\237"+
    "\3\0\1\241\1\0\1\241\6\0\1\167\50\0\2\166"+
    "\1\214\1\242\1\166\1\242\4\166\1\212\1\166\1\263"+
    "\50\166\2\244\1\245\7\244\1\264\52\244\1\0\1\265"+
    "\4\0\1\265\1\0\1\141\13\0\1\266\23\0\5\265"+
    "\34\0\1\266\41\0\1\267\4\0\1\267\41\0\5\267"+
    "\10\0\1\115\1\270\1\116\1\54\1\115\1\54\1\270"+
    "\2\54\1\0\3\115\6\54\4\115\2\54\1\115\3\54"+
    "\1\117\1\115\1\117\10\115\5\270\1\54\1\115\4\54"+
    "\2\115\1\271\1\272\1\273\1\274\1\271\1\274\3\272"+
    "\1\275\1\276\1\271\1\115\6\272\1\115\3\271\2\272"+
    "\1\271\3\272\1\277\1\271\1\300\10\271\6\272\1\271"+
    "\4\272\2\271\1\115\1\54\1\116\3\115\3\54\1\0"+
    "\3\115\6\54\4\115\2\54\1\115\3\54\1\117\1\115"+
    "\1\117\10\115\1\301\5\54\1\115\4\54\3\115\1\54"+
    "\1\116\3\115\3\54\1\0\3\115\1\54\1\302\4\54"+
    "\4\115\2\54\1\115\3\54\1\117\1\115\1\117\10\115"+
    "\6\54\1\115\4\54\2\115\34\0\1\303\31\0\1\304"+
    "\1\71\1\70\1\0\1\70\1\304\2\70\4\0\6\70"+
    "\3\0\1\34\2\70\1\0\3\70\1\35\12\0\5\304"+
    "\1\70\1\0\4\70\3\0\1\51\1\50\1\51\1\0"+
    "\4\51\4\0\6\51\4\0\2\51\1\0\3\51\13\0"+
    "\6\51\1\0\4\51\2\0\2\237\1\240\1\262\1\237"+
    "\1\262\3\237\1\241\2\237\1\261\50\237\2\244\1\245"+
    "\1\264\1\244\1\264\4\244\1\241\1\244\1\263\50\244"+
    "\10\0\1\141\55\0\1\305\4\0\1\305\41\0\5\305"+
    "\10\0\1\115\1\54\1\116\1\54\1\115\4\54\1\0"+
    "\3\115\6\54\4\115\2\54\1\115\3\54\1\117\1\115"+
    "\1\117\10\115\6\54\1\115\4\54\2\115\2\271\1\306"+
    "\6\271\1\0\1\115\1\271\1\115\6\271\1\115\11\271"+
    "\1\277\1\271\1\300\26\271\1\272\1\273\3\271\3\272"+
    "\1\0\1\115\1\271\1\115\6\272\1\115\3\271\2\272"+
    "\1\271\3\272\1\277\1\271\1\300\10\271\6\272\1\271"+
    "\4\272\3\271\1\307\1\310\1\271\2\272\1\307\26\272"+
    "\1\311\1\272\1\312\10\272\5\307\10\272\2\271\1\306"+
    "\1\274\1\271\1\274\3\271\1\275\1\276\1\271\1\115"+
    "\6\271\1\115\11\271\1\277\1\271\1\300\25\271\2\275"+
    "\1\313\6\275\1\314\53\275\2\276\1\315\6\276\1\316"+
    "\1\317\22\276\1\320\1\276\1\320\25\276\2\321\1\322"+
    "\6\321\2\0\1\321\1\0\6\321\1\0\11\321\1\277"+
    "\27\321\1\115\1\54\1\116\3\115\3\54\1\0\3\115"+
    "\6\54\4\115\2\54\1\115\3\54\1\117\1\115\1\117"+
    "\10\115\4\54\1\323\1\54\1\115\4\54\3\115\1\54"+
    "\1\116\1\324\1\115\1\324\3\54\1\325\1\326\2\115"+
    "\6\54\4\115\2\54\1\115\3\54\1\117\1\115\1\117"+
    "\10\115\6\54\1\115\4\54\2\115\17\0\1\327\46\0"+
    "\1\70\1\71\1\70\1\0\4\70\4\0\6\70\3\0"+
    "\1\34\2\70\1\0\3\70\1\35\12\0\6\70\1\0"+
    "\4\70\3\0\1\330\4\0\1\330\41\0\5\330\10\0"+
    "\2\271\1\306\6\271\1\321\23\271\1\277\1\271\1\300"+
    "\26\271\1\331\1\273\1\272\1\271\1\272\1\331\2\272"+
    "\1\0\1\115\1\271\1\115\6\272\1\115\3\271\2\272"+
    "\1\271\3\272\1\277\1\271\1\300\10\271\5\331\1\272"+
    "\1\271\4\272\3\271\1\272\1\273\3\271\3\272\1\321"+
    "\3\271\6\272\4\271\2\272\1\271\3\272\1\277\1\271"+
    "\1\300\10\271\6\272\1\271\4\272\2\271\2\275\1\313"+
    "\6\275\1\332\53\275\1\0\1\333\1\334\1\335\1\0"+
    "\1\335\2\333\5\0\6\333\4\0\2\333\1\0\3\333"+
    "\1\336\12\0\6\333\1\0\4\333\2\0\2\276\1\315"+
    "\6\276\1\316\1\337\22\276\1\320\1\276\1\320\25\276"+
    "\2\316\1\340\7\316\1\314\52\316\1\115\1\341\1\342"+
    "\1\343\1\115\1\343\2\341\1\115\1\0\3\115\6\341"+
    "\4\115\2\341\1\115\3\341\1\336\1\115\1\117\10\115"+
    "\6\341\1\115\4\341\2\115\2\321\1\322\32\321\1\277"+
    "\27\321\1\115\1\54\1\116\3\115\3\54\1\0\3\115"+
    "\6\54\4\115\2\54\1\115\3\54\1\117\1\115\1\117"+
    "\10\115\1\54\1\344\4\54\1\115\4\54\5\115\1\324"+
    "\1\115\1\324\3\115\1\325\1\326\22\115\1\117\1\115"+
    "\1\117\25\115\2\325\1\345\6\325\1\346\53\325\2\326"+
    "\1\347\6\326\1\350\1\115\22\326\1\351\1\326\1\351"+
    "\25\326\16\0\1\352\46\0\1\271\1\353\1\273\1\272"+
    "\1\271\1\272\1\353\2\272\1\0\1\115\1\271\1\115"+
    "\6\272\1\115\3\271\2\272\1\271\3\272\1\277\1\271"+
    "\1\300\10\271\5\353\1\272\1\271\4\272\2\271\1\275"+
    "\1\354\1\355\1\356\1\275\1\356\2\354\1\275\1\314"+
    "\3\275\6\354\4\275\2\354\1\275\3\354\1\357\12\275"+
    "\6\354\1\275\4\354\2\275\1\0\1\333\1\334\1\360"+
    "\1\0\1\360\3\333\4\0\6\333\3\0\1\335\2\333"+
    "\1\0\3\333\1\336\12\0\6\333\1\0\4\333\3\0"+
    "\1\361\1\333\1\0\2\333\1\361\41\333\5\361\10\333"+
    "\1\0\1\333\1\334\1\335\1\0\1\335\2\333\5\0"+
    "\6\333\4\0\2\333\1\0\3\333\13\0\6\333\1\0"+
    "\4\333\2\0\1\276\1\362\1\363\1\364\1\276\1\364"+
    "\2\362\1\276\1\316\1\317\2\276\6\362\4\276\2\362"+
    "\1\276\3\362\1\365\1\276\1\320\10\276\6\362\1\276"+
    "\4\362\2\276\2\316\1\340\7\316\1\366\52\316\1\115"+
    "\1\341\1\342\1\367\1\115\1\367\3\341\1\0\3\115"+
    "\6\341\3\115\1\343\2\341\1\115\3\341\1\336\1\115"+
    "\1\117\10\115\6\341\1\115\4\341\3\115\1\370\1\341"+
    "\1\115\2\341\1\370\2\341\1\333\23\341\1\371\1\341"+
    "\1\371\10\341\5\370\10\341\1\115\1\341\1\342\1\343"+
    "\1\115\1\343\2\341\1\115\1\0\3\115\6\341\4\115"+
    "\2\341\1\115\3\341\1\117\1\115\1\117\10\115\6\341"+
    "\1\115\4\341\2\115\2\325\1\345\6\325\1\372\53\325"+
    "\3\0\1\346\1\0\1\346\27\0\1\373\27\0\2\326"+
    "\1\347\6\326\1\350\23\326\1\351\1\326\1\351\25\326"+
    "\2\350\1\374\7\350\1\346\52\350\50\0\1\375\14\0"+
    "\1\271\1\376\1\273\1\272\1\271\1\272\1\376\2\272"+
    "\1\0\1\115\1\271\1\115\6\272\1\115\3\271\2\272"+
    "\1\271\3\272\1\277\1\271\1\300\10\271\5\376\1\272"+
    "\1\271\4\272\2\271\1\275\1\354\1\355\1\377\1\275"+
    "\1\377\3\354\1\314\3\275\6\354\3\275\1\356\2\354"+
    "\1\275\3\354\1\357\12\275\6\354\1\275\4\354\3\275"+
    "\1\u0100\1\u0101\1\275\2\354\1\u0100\2\354\1\u0102\36\354"+
    "\5\u0100\10\354\1\275\1\354\1\355\1\356\1\275\1\356"+
    "\2\354\1\275\1\314\3\275\6\354\4\275\2\354\1\275"+
    "\3\354\13\275\6\354\1\275\4\354\2\275\3\0\1\360"+
    "\1\0\1\360\20\0\1\335\6\0\1\336\30\0\1\u0103"+
    "\1\334\1\333\1\0\1\333\1\u0103\2\333\4\0\6\333"+
    "\3\0\1\335\2\333\1\0\3\333\1\336\12\0\5\u0103"+
    "\1\333\1\0\4\333\2\0\1\276\1\362\1\363\1\u0104"+
    "\1\276\1\u0104\3\362\1\316\1\317\2\276\6\362\3\276"+
    "\1\364\2\362\1\276\3\362\1\365\1\276\1\320\10\276"+
    "\6\362\1\276\4\362\3\276\1\u0105\1\u0106\1\276\2\362"+
    "\1\u0105\2\362\1\u0107\1\u0108\22\362\1\u0109\1\362\1\u0109"+
    "\10\362\5\u0105\10\362\1\276\1\362\1\363\1\364\1\276"+
    "\1\364\2\362\1\276\1\316\1\317\2\276\6\362\4\276"+
    "\2\362\1\276\3\362\1\320\1\276\1\320\10\276\6\362"+
    "\1\276\4\362\2\276\1\316\1\u0107\1\u010a\1\u010b\1\316"+
    "\1\u010b\2\u0107\2\316\1\314\2\316\6\u0107\4\316\2\u0107"+
    "\1\316\3\u0107\1\365\12\316\6\u0107\1\316\4\u0107\2\316"+
    "\3\115\1\367\1\115\1\367\3\115\1\0\14\115\1\343"+
    "\6\115\1\336\1\115\1\117\26\115\1\u010c\1\342\1\341"+
    "\1\115\1\341\1\u010c\2\341\1\0\3\115\6\341\3\115"+
    "\1\343\2\341\1\115\3\341\1\336\1\115\1\117\10\115"+
    "\5\u010c\1\341\1\115\4\341\2\115\2\325\1\345\1\372"+
    "\1\325\1\372\3\325\1\346\23\325\1\u010d\27\325\2\350"+
    "\1\374\7\350\1\u010e\52\350\21\0\1\u010f\43\0\1\271"+
    "\1\u0110\1\273\1\272\1\271\1\272\1\u0110\2\272\1\0"+
    "\1\115\1\271\1\115\6\272\1\115\3\271\2\272\1\271"+
    "\3\272\1\277\1\271\1\300\10\271\5\u0110\1\272\1\271"+
    "\4\272\2\271\2\275\1\313\1\377\1\275\1\377\3\275"+
    "\1\314\14\275\1\356\6\275\1\357\30\275\1\u0111\1\355"+
    "\1\354\1\275\1\354\1\u0111\2\354\1\314\3\275\6\354"+
    "\3\275\1\356\2\354\1\275\3\354\1\357\12\275\5\u0111"+
    "\1\354\1\275\4\354\3\275\1\354\1\355\1\377\1\275"+
    "\1\377\3\354\1\332\3\275\6\354\3\275\1\356\2\354"+
    "\1\275\3\354\1\357\12\275\6\354\1\275\4\354\3\275"+
    "\1\354\1\355\1\u0112\1\275\1\u0112\3\354\1\314\3\275"+
    "\6\354\3\275\1\356\2\354\1\275\3\354\1\357\12\275"+
    "\6\354\1\275\4\354\2\275\1\0\1\u0113\1\334\1\333"+
    "\1\0\1\333\1\u0113\2\333\4\0\6\333\3\0\1\335"+
    "\2\333\1\0\3\333\1\336\12\0\5\u0113\1\333\1\0"+
    "\4\333\2\0\2\276\1\315\1\u0104\1\276\1\u0104\3\276"+
    "\1\316\1\317\13\276\1\364\6\276\1\365\1\276\1\320"+
    "\26\276\1\u0114\1\363\1\362\1\276\1\362\1\u0114\2\362"+
    "\1\316\1\317\2\276\6\362\3\276\1\364\2\362\1\276"+
    "\3\362\1\365\1\276\1\320\10\276\5\u0114\1\362\1\276"+
    "\4\362\3\276\1\362\1\363\1\u0104\1\276\1\u0104\3\362"+
    "\1\316\1\337\2\276\6\362\3\276\1\364\2\362\1\276"+
    "\3\362\1\365\1\276\1\320\10\276\6\362\1\276\4\362"+
    "\2\276\1\316\1\u0107\1\u010a\1\u0115\1\316\1\u0115\3\u0107"+
    "\1\316\1\314\2\316\6\u0107\3\316\1\u010b\2\u0107\1\316"+
    "\3\u0107\1\365\12\316\6\u0107\1\316\4\u0107\2\316\1\276"+
    "\1\362\1\363\1\u0116\1\276\1\u0116\3\362\1\316\1\317"+
    "\2\276\6\362\3\276\1\364\2\362\1\276\3\362\1\365"+
    "\1\276\1\320\10\276\6\362\1\276\4\362\2\276\1\316"+
    "\1\u0117\1\u0118\1\316\2\u0107\1\u0117\3\u0107\1\u0119\35\u0107"+
    "\5\u0117\10\u0107\1\316\1\u0107\1\u010a\1\u010b\1\316\1\u010b"+
    "\2\u0107\2\316\1\314\2\316\6\u0107\4\316\2\u0107\1\316"+
    "\3\u0107\13\316\6\u0107\1\316\4\u0107\2\316\1\115\1\u011a"+
    "\1\342\1\341\1\115\1\341\1\u011a\2\341\1\0\3\115"+
    "\6\341\3\115\1\343\2\341\1\115\3\341\1\336\1\115"+
    "\1\117\10\115\5\u011a\1\341\1\115\4\341\2\115\2\350"+
    "\1\374\1\u010e\1\350\1\u010e\4\350\1\346\22\350\1\u011b"+
    "\27\350\16\0\1\u011c\46\0\1\271\1\u011d\1\273\1\272"+
    "\1\271\1\272\1\u011d\2\272\1\0\1\115\1\271\1\115"+
    "\6\272\1\115\3\271\2\272\1\271\3\272\1\277\1\271"+
    "\1\300\10\271\5\u011d\1\272\1\271\4\272\2\271\1\275"+
    "\1\u011e\1\355\1\354\1\275\1\354\1\u011e\2\354\1\314"+
    "\3\275\6\354\3\275\1\356\2\354\1\275\3\354\1\357"+
    "\12\275\5\u011e\1\354\1\275\4\354\3\275\1\354\1\355"+
    "\1\u0112\1\275\1\u0112\2\354\1\275\1\314\3\275\6\354"+
    "\3\275\1\356\2\354\1\275\3\354\1\357\12\275\6\354"+
    "\1\275\4\354\2\275\1\0\1\u011f\1\334\1\333\1\0"+
    "\1\333\1\u011f\2\333\4\0\6\333\3\0\1\335\2\333"+
    "\1\0\3\333\1\336\12\0\5\u011f\1\333\1\0\4\333"+
    "\2\0\1\276\1\u0120\1\363\1\362\1\276\1\362\1\u0120"+
    "\2\362\1\316\1\317\2\276\6\362\3\276\1\364\2\362"+
    "\1\276\3\362\1\365\1\276\1\320\10\276\5\u0120\1\362"+
    "\1\276\4\362\2\276\2\316\1\340\1\u0115\1\316\1\u0115"+
    "\4\316\1\314\13\316\1\u010b\6\316\1\365\27\316\1\276"+
    "\1\362\1\363\1\u0116\1\276\1\u0116\2\362\1\276\1\316"+
    "\1\317\2\276\6\362\3\276\1\364\2\362\1\276\3\362"+
    "\1\365\1\276\1\320\10\276\6\362\1\276\4\362\2\276"+
    "\1\316\1\u0121\1\u010a\1\u0107\1\316\1\u0107\1\u0121\2\u0107"+
    "\1\316\1\314\2\316\6\u0107\3\316\1\u010b\2\u0107\1\316"+
    "\3\u0107\1\365\12\316\5\u0121\1\u0107\1\316\4\u0107\3\316"+
    "\1\u0107\1\u010a\1\u0115\1\316\1\u0115\3\u0107\1\316\1\366"+
    "\2\316\6\u0107\3\316\1\u010b\2\u0107\1\316\3\u0107\1\365"+
    "\12\316\6\u0107\1\316\4\u0107\3\316\1\u0107\1\u010a\1\u0122"+
    "\1\316\1\u0122\3\u0107\1\316\1\314\2\316\6\u0107\3\316"+
    "\1\u010b\2\u0107\1\316\3\u0107\1\365\12\316\6\u0107\1\316"+
    "\4\u0107\2\316\1\115\1\u0123\1\342\1\341\1\115\1\341"+
    "\1\u0123\2\341\1\0\3\115\6\341\3\115\1\343\2\341"+
    "\1\115\3\341\1\336\1\115\1\117\10\115\5\u0123\1\341"+
    "\1\115\4\341\2\115\1\271\1\272\1\273\1\272\1\271"+
    "\4\272\1\0\1\115\1\271\1\115\6\272\1\115\3\271"+
    "\2\272\1\271\3\272\1\277\1\271\1\300\10\271\6\272"+
    "\1\271\4\272\2\271\1\275\1\u0124\1\355\1\354\1\275"+
    "\1\354\1\u0124\2\354\1\314\3\275\6\354\3\275\1\356"+
    "\2\354\1\275\3\354\1\357\12\275\5\u0124\1\354\1\275"+
    "\4\354\2\275\1\0\1\u0125\1\334\1\333\1\0\1\333"+
    "\1\u0125\2\333\4\0\6\333\3\0\1\335\2\333\1\0"+
    "\3\333\1\336\12\0\5\u0125\1\333\1\0\4\333\2\0"+
    "\1\276\1\u0126\1\363\1\362\1\276\1\362\1\u0126\2\362"+
    "\1\316\1\317\2\276\6\362\3\276\1\364\2\362\1\276"+
    "\3\362\1\365\1\276\1\320\10\276\5\u0126\1\362\1\276"+
    "\4\362\2\276\1\316\1\u0127\1\u010a\1\u0107\1\316\1\u0107"+
    "\1\u0127\2\u0107\1\316\1\314\2\316\6\u0107\3\316\1\u010b"+
    "\2\u0107\1\316\3\u0107\1\365\12\316\5\u0127\1\u0107\1\316"+
    "\4\u0107\3\316\1\u0107\1\u010a\1\u0122\1\316\1\u0122\2\u0107"+
    "\2\316\1\314\2\316\6\u0107\3\316\1\u010b\2\u0107\1\316"+
    "\3\u0107\1\365\12\316\6\u0107\1\316\4\u0107\2\316\1\115"+
    "\1\u0128\1\342\1\341\1\115\1\341\1\u0128\2\341\1\0"+
    "\3\115\6\341\3\115\1\343\2\341\1\115\3\341\1\336"+
    "\1\115\1\117\10\115\5\u0128\1\341\1\115\4\341\2\115"+
    "\1\275\1\u0129\1\355\1\354\1\275\1\354\1\u0129\2\354"+
    "\1\314\3\275\6\354\3\275\1\356\2\354\1\275\3\354"+
    "\1\357\12\275\5\u0129\1\354\1\275\4\354\2\275\1\0"+
    "\1\u012a\1\334\1\333\1\0\1\333\1\u012a\2\333\4\0"+
    "\6\333\3\0\1\335\2\333\1\0\3\333\1\336\12\0"+
    "\5\u012a\1\333\1\0\4\333\2\0\1\276\1\u012b\1\363"+
    "\1\362\1\276\1\362\1\u012b\2\362\1\316\1\317\2\276"+
    "\6\362\3\276\1\364\2\362\1\276\3\362\1\365\1\276"+
    "\1\320\10\276\5\u012b\1\362\1\276\4\362\2\276\1\316"+
    "\1\u012c\1\u010a\1\u0107\1\316\1\u0107\1\u012c\2\u0107\1\316"+
    "\1\314\2\316\6\u0107\3\316\1\u010b\2\u0107\1\316\3\u0107"+
    "\1\365\12\316\5\u012c\1\u0107\1\316\4\u0107\2\316\1\115"+
    "\1\u012d\1\342\1\341\1\115\1\341\1\u012d\2\341\1\0"+
    "\3\115\6\341\3\115\1\343\2\341\1\115\3\341\1\336"+
    "\1\115\1\117\10\115\5\u012d\1\341\1\115\4\341\2\115"+
    "\1\275\1\u012e\1\355\1\354\1\275\1\354\1\u012e\2\354"+
    "\1\314\3\275\6\354\3\275\1\356\2\354\1\275\3\354"+
    "\1\357\12\275\5\u012e\1\354\1\275\4\354\2\275\1\0"+
    "\1\333\1\334\1\333\1\0\4\333\4\0\6\333\3\0"+
    "\1\335\2\333\1\0\3\333\1\336\12\0\6\333\1\0"+
    "\4\333\2\0\1\276\1\u012f\1\363\1\362\1\276\1\362"+
    "\1\u012f\2\362\1\316\1\317\2\276\6\362\3\276\1\364"+
    "\2\362\1\276\3\362\1\365\1\276\1\320\10\276\5\u012f"+
    "\1\362\1\276\4\362\2\276\1\316\1\u0130\1\u010a\1\u0107"+
    "\1\316\1\u0107\1\u0130\2\u0107\1\316\1\314\2\316\6\u0107"+
    "\3\316\1\u010b\2\u0107\1\316\3\u0107\1\365\12\316\5\u0130"+
    "\1\u0107\1\316\4\u0107\2\316\1\115\1\341\1\342\1\341"+
    "\1\115\4\341\1\0\3\115\6\341\3\115\1\343\2\341"+
    "\1\115\3\341\1\336\1\115\1\117\10\115\6\341\1\115"+
    "\4\341\2\115\1\275\1\354\1\355\1\354\1\275\4\354"+
    "\1\314\3\275\6\354\3\275\1\356\2\354\1\275\3\354"+
    "\1\357\12\275\6\354\1\275\4\354\2\275\1\276\1\362"+
    "\1\363\1\362\1\276\4\362\1\316\1\317\2\276\6\362"+
    "\3\276\1\364\2\362\1\276\3\362\1\365\1\276\1\320"+
    "\10\276\6\362\1\276\4\362\2\276\1\316\1\u0131\1\u010a"+
    "\1\u0107\1\316\1\u0107\1\u0131\2\u0107\1\316\1\314\2\316"+
    "\6\u0107\3\316\1\u010b\2\u0107\1\316\3\u0107\1\365\12\316"+
    "\5\u0131\1\u0107\1\316\4\u0107\3\316\1\u0107\1\u010a\1\u0107"+
    "\1\316\4\u0107\1\316\1\314\2\316\6\u0107\3\316\1\u010b"+
    "\2\u0107\1\316\3\u0107\1\365\12\316\6\u0107\1\316\4\u0107"+
    "\2\316";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  9,  1,  1,  9, 
     1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  9,  0,  9,  9,  1,  0, 
     0,  0,  9,  0,  0,  1,  1,  0,  1,  1,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  9,  0,  0,  1,  9,  1,  1,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  0,  0,  9,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  1,  1,  1,  1, 
     0,  1,  1,  0,  0,  0,  0,  0,  0,  9,  0,  9,  0,  0,  1,  1, 
     1,  0,  0,  0,  0,  0,  9,  0,  1,  1,  1,  0,  0,  0,  1,  0, 
     0,  1,  0,  0,  1,  1,  1,  1,  0,  0,  1,  0,  1,  0,  9,  1, 
     1,  1,  0,  0,  1,  0,  0,  0,  0,  1,  1,  1,  0,  1,  0,  0, 
     0,  0,  1,  0,  0,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  1, 
     1,  0,  1,  0,  1,  9,  1,  0,  0,  0,  0,  0,  0,  0,  1,  1, 
     0,  0,  0,  0,  1,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  1, 
     0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  9,  0,  0, 
     0,  0,  0,  1,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  1,  0, 
     0,  0,  0,  0,  1,  0,  0,  0,  1,  0,  9,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  1,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  9,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
	// Put stuff to include in the class here

	// External flag
	boolean paranoidStringCheck = false;
	boolean deleteErrors = true;
	boolean debug = true;
	
	// Internal flags
	boolean postBadImportFlag = false; // both URLs and @import's
	boolean importFlag = false;
	boolean urlFlag = false;

	// Writer
	Writer w = null; // Will NPE if not initialized properly

	public void parse () throws IOException {
		while (yylex() != null);
	}
	
	CSSTokenizerFilter(Reader r, Writer w, boolean paranoidStringCheck) {
		this(r);
		this.w = w;
		this.paranoidStringCheck = paranoidStringCheck;
	}

	void throwError(String s) {
		throw new IllegalStateException("You MUST override throwError!");
	}

	String processImportURL(String s) {
		throw new IllegalStateException("You MUST override processImportURL!");
	}

	String processURL(String s) {
		throw new IllegalStateException("You MUST override processURL!");
	}
	
	void log(String s) {
		System.err.println("CSSTokenizerFilter: "+s);
	}

	void logError(String s) {
		System.err.println("CSSTokenizerFilter ERROR: "+s);
	}
	
	static String unquote(String s, char c) {
		if(s.length() > 1) {
			if(s.charAt(s.length()-1) == c) {
				s = s.substring(1, s.length()-1);
				return s;
			} else return "";
		} else return "";
	}
	
	// This is not very efficient. The parser below knows the quoting rules too.
	
	static boolean isHexDigit(char c) {
		return ('a' <= c && c <= 'f' ||
		  	'A' <= c && c <= 'F' ||
			'0' <= c && c <= '9');
	}
	
	class DecodedStringThingy {
		char quote; // " " means not quoted
		boolean url; // in a url() ?
		String data;
		public String suffix; // includes any whitespace
		public DecodedStringThingy(String s) {
			if(s.startsWith("url(")) {
				s = s.substring("url(".length());
				url = true;
			}
			char q = s.charAt(0);
			if(q == '\'' || q == '\"') {
				quote = q;
				s = s.substring(1);
			} else quote = ' ';
			StringBuffer buffer = new StringBuffer();
			int x = 0;
			boolean justEscaping = false;
			boolean stillEscaping = false;
			StringBuffer hexEscape = new StringBuffer();
			while(x < s.length()-1) {
				char c = s.charAt(x);
				x++;
				if(justEscaping) {
					if(c == '\n') {
						buffer.append(c);
						justEscaping = false;
					} else if(isHexDigit(c)) {
						hexEscape.append(c);
						justEscaping = false;
						stillEscaping = true;
					} else {
						buffer.append(c);
						// Will need to be reencoded if quote or \n
						justEscaping = false;
					}
				} else if(stillEscaping) {
					if(isHexDigit(c) && hexEscape.length() < 6) {
						hexEscape.append(c);
					} else if(Character.isWhitespace(c)) {
						// Ignore one whitespace char after an escape
						int d = Integer.parseInt(hexEscape.toString(),
									 16);
						if(d > 0xFFFF) {
							String error = 
							    "UCS-4 CHARACTERS OVER 0xFFFF NOT SUPPORTED!";
							logError(error);
							try {
								w.write("/* "+error+"*/");
							} catch (IOException e) {
								grumbleOutput(e);
							}
						} else {
							c = (char)d;
							buffer.append(c);
						}
						stillEscaping = false;
						hexEscape = new StringBuffer();
					} else {
						int d = Integer.parseInt(hexEscape.toString(),
									 16);
						if(d > 0xFFFF) {
							String error = 
							    "UCS-4 CHARACTERS OVER 0xFFFF NOT SUPPORTED!";
							logError(error);
							try {
								w.write("/* "+error+"*/");
							} catch (IOException e) {
								grumbleOutput(e);
							}
						} else {
							char o = (char)d;
							buffer.append(o);
						}
						buffer.append(c);
						stillEscaping = false;
						hexEscape = new StringBuffer();
					}
				} else {
					if(quote != ' ' && c == quote) {
						break;
					} else if (c == '\\') {
						justEscaping = true;
					} else {
						buffer.append(c);
					}
				}
			}
			data = buffer.toString();
			if(s.length() > (x+1))
				suffix = s.substring(x+1);
			else suffix = "";
		}
		
		/**
		 * @param e
		 */
		private void grumbleOutput(IOException e) {
			Core.logger.log(this, "Caught "+e+" writing to "+w,
					Logger.ERROR);
		}

		public String toString() {
			StringBuffer out = new StringBuffer();
			if(url) out.append("url(");
			if(quote != ' ') out.append(quote);
			out.append(unescapeData());
			if(quote != ' ') out.append(quote);
			if(url) out.append(")");
			out.append(suffix);
			return out.toString();
		}
		
		public String unescapeData() {
			StringBuffer sb = new StringBuffer();
			for(int i=0;i<data.length();i++) {
				char c = data.charAt(i);
				if(c == quote || c == '\n') {
					sb.append('\\');
				}
				sb.append(c);
			}
			return sb.toString();
		}
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CSSTokenizerFilter(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CSSTokenizerFilter(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[13356];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 78: 
        case 98: 
        case 191: 
        case 201: 
        case 207: 
        case 232: 
        case 248: 
        case 264: 
          { 
	if(!deleteErrors) {
		throwError("Unknown @identifier "+yytext());
	} else {
		String s = yytext();
		if(debug) log("Discarded identifier: "+s);
		// Ignore
	}
 }
        case 306: break;
        case 118: 
        case 135: 
        case 176: 
        case 178: 
          { 
	// This is horrible. However it seems that there is no other way to do it with either jflex or CUP, as {URL} cannot be an unambiguous token :(
	String s = yytext();
	if(debug) log("Recognized URL: "+s);
	
	DecodedStringThingy dst = new DecodedStringThingy(s);
	
	if(!dst.url) {
		throw new IllegalStateException("parsing url().. isn't a url()");
	}
	if(dst.suffix.length() > 0) {
		yypushback(dst.suffix.length());
		dst.suffix = "";
	}
	
	s = dst.data;
	if(debug) log("URL now: "+s);
	s = processURL(s);
	dst.data = s;
	if(s == null || s.length()==0) {
		if(debug) log("URL invalid");
		w.write("url()");
	} else {
		s = dst.toString();
		if(debug) log("Writing: "+s);
		w.write(s);
	}
 }
        case 307: break;
        case 26: 
        case 94: 
          { 
	String s = yytext();
	if(s.startsWith("url")) throwError("Invalid contents of url()");
	w.write(s);
	if(debug) log("Matched function start: "+s);
 }
        case 308: break;
        case 28: 
          { 
	if(postBadImportFlag) {
		// Ignore
		postBadImportFlag = false;
		if(debug) log("Ignoring mediums list because after bad import: "+
			yytext());
	} else {
		String s = yytext();
		w.write(s);
		if(debug) log("Matched and passing on mediums list: "+s);
	}
 }
        case 309: break;
        case 190: 
        case 200: 
        case 221: 
        case 238: 
        case 244: 
          { 
	String s = yytext();
	if(debug) log("Found @import: "+s);
	s = s.substring("@import".length());
	s = s.trim();
	DecodedStringThingy dst = new DecodedStringThingy(s);
	s = dst.data;
	if(debug) log("URL: "+s);
	s = processURL(s);
	if (!(s == null || s.length()==0)) {
		if(debug) log("URL now: "+s);
		s = "@import "+dst.toString();
		if(debug) log("Writing: "+s);
		w.write(s);
	} else
		if(debug) log("Dropped @import");
 }
        case 310: break;
        case 105: 
        case 129: 
          { 
	// Comment
	// CSS comments are harmless? - FIXME check
	String s = yytext();
	w.write(s);
	if(debug) log("Matched comment: "+s);
 }
        case 311: break;
        case 107: 
          {  
	String s = yytext();
	w.write(s);
	if(debug) log("Matched HTML comment: "+s);
 }
        case 312: break;
        case 148: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched @media: "+s);
 }
        case 313: break;
        case 74: 
        case 75: 
        case 95: 
        case 97: 
        case 120: 
        case 121: 
        case 143: 
        case 144: 
        case 166: 
        case 167: 
        case 180: 
        case 181: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched unicode: "+s);
 }
        case 314: break;
        case 37: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched number: "+s);
 }
        case 315: break;
        case 250: 
        case 268: 
        case 282: 
          { 
	String s = yytext();
	if(debug) log("Matched and ignoring charset: "+s);
	// Ignore
 }
        case 316: break;
        case 54: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched |=: "+s);
 }
        case 317: break;
        case 126: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched @page: "+s);
 }
        case 318: break;
        case 92: 
        case 154: 
          { 
	String s = yytext();
	if(debug) log("Got hexcolor: "+s);
	w.write(s);
 }
        case 319: break;
        case 2: 
        case 5: 
        case 13: 
        case 30: 
        case 41: 
        case 57: 
        case 73: 
        case 89: 
        case 110: 
        case 132: 
        case 153: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched ident: "+s);
 }
        case 320: break;
        case 34: 
        case 59: 
        case 60: 
          { 
	String s = yytext();
	if(debug) log("Matched string: "+s);
	if(paranoidStringCheck && s.indexOf(':') != -1) {
		w.write("/* Deleted disallowed string */");
		log("Deleted disallowed string: "+s);
	} else {
		w.write(s);
	}
 }
        case 321: break;
        case 38: 
        case 40: 
        case 71: 
        case 72: 
        case 93: 
        case 111: 
        case 112: 
        case 133: 
        case 134: 
        case 155: 
        case 175: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched #name: "+s);
 }
        case 322: break;
        case 283: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched important: "+s);
 }
        case 323: break;
        case 15: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched semicolon: "+s);
 }
        case 324: break;
        case 138: 
        case 140: 
        case 142: 
        case 157: 
        case 162: 
        case 165: 
          { 
	String s = yytext();
	if(debug) log("Ignoring unrecognizable url: "+s);
	w.write("/* Ignoring unmatchable URL */url()");
 }
        case 325: break;
        case 53: 
          {  
	String s = yytext();
	w.write(s); 
	if(debug) log("Matched ~=: "+s);
 }
        case 326: break;
        case 122: 
        case 145: 
        case 168: 
        case 182: 
        case 196: 
        case 215: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched unicode range: "+s);
 }
        case 327: break;
        case 17: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched close braces: "+s);
 }
        case 328: break;
        case 10: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched function end: "+s);
 }
        case 329: break;
        case 1: 
        case 3: 
        case 7: 
        case 8: 
        case 11: 
        case 14: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
          { 
	String s = yytext();
	char c = s.charAt(0);
	log("Matched anything: "+yytext()+" - ignoring");
	w.write("/* ignored unmatched char: "+c+" */"); // single char cannot break out of comment
 }
        case 330: break;
        case 227: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched @font-face: "+s);
 }
        case 331: break;
        case 16: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched open braces: "+s);
 }
        case 332: break;
        case 6: 
        case 9: 
        case 12: 
        case 18: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched single char: "+s);
 }
        case 333: break;
        case 4: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched whitespace: "+s);
 }
        case 334: break;
        case 29: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched measurement: "+s);
 }
        case 335: break;
        case 58: 
          { 
	String s = yytext();
	w.write(s); 
	if(debug) log("Matched HTML comment: "+s);
 }
        case 336: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
